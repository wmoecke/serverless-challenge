##
# Parâmetros que devem ser alterados de acordo com o perfil criado no serverless.com
app: api
tenant: wmoecke
service: serverless-challenge
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
##
# region deve ser alterado de acordo com o perfil criado no AWS  
  region: sa-east-1
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
##
# Pode ser necessário também alterar o nome do Bucket, caso haja conflito com algum nome existente
    S3_BUCKET: images-instagrao
##
# Foram concedidas as permissões para o Bucket e DynamoDB, conforme a documentação do AWS. Contudo, 
# verificou-se em alguns casos que era necessário tornar o Bucket acessível publicamente através do S3 Console
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - s3:GetObject
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
        - "arn:aws:s3:::self:provider.environment.S3_BUCKET/*"

##
# A partir daqui declaramos as funções lambda que são implementadas no handler.js
functions:
  ExtractMetadata:
    handler: handler.ExtractMetadata
    description:
    memorySize: 128
    timeout: 30
    events:
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: upload/
            - suffix: .jpg
      - s3:
          bucket: ${self:provider.environment.S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - prefix: upload/
            - suffix: .png

  GetMetadata:
    handler: handler.GetMetadata
    description:
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: getMetadata/{s3objectkey}
          method: get
          cors: true

  GetImage:
    handler: handler.GetImage
    description:
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: getImage/{s3objectkey}
          method: get
          cors: true

  InfoImages:
    handler: handler.InfoImages
    description:
    memorySize: 128
    timeout: 30
    events:
      - http:
          path: infoImages/
          method: get       
          cors: true

resources:
  Resources:
    ImagesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: s3objectkey
            AttributeType: S
        KeySchema:
          - AttributeName: s3objectkey
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}